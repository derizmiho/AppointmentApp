<!-- views/appointments.ejs -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>All Appointments</title>

    <!-- Add a link to an external stylesheet if needed -->
    <link rel="stylesheet" href="/styles/appointments.css">
</head>
<body>
    <!-- Include the navigation bar -->
    <%- include('partials/nav.ejs') %>

    <h1>View Appointments</h1>

    <!-- Search bar for client's last name -->
    <input type="text" id="searchInput" placeholder="Search by last name" oninput="filterAppointments()">

    <!-- Unordered list to display appointments -->
    <ul id="appointmentsList">
        <!-- Iterate through appointments array using EJS syntax -->
        <% appointments.forEach(appointment => { %>
            <!-- List item for each appointment -->
            <li id="appointment-<%= appointment.id %>">
                <!-- Display appointment details -->
                <strong>Title:</strong> <%= appointment.title %><br>
                <strong>Date:</strong> <%= new Date(appointment.date).toLocaleString() %>
                <button onclick="deleteAppointment('<%= appointment.id %>')">Delete</button>
                <button onclick="editAppointment('<%= appointment.id %>')">Edit</button>
            </li>
        <% }); %>
    </ul>

    <!-- Additional JavaScript for filtering appointments and handling delete/edit -->
    <script>
        // Define the saveEditedDate function
    function saveEditedDate(appointmentId, editedDateInput, appointmentElement) {
        const newDate = editedDateInput.value;

        // Assuming you have an API endpoint to update the date in the server
        fetch(`/edit-appointment/${appointmentId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ date: newDate }),
        })
            .then(response => response.json())
            .then(result => {
                // Assuming the server responds with the updated appointment data
                const updatedAppointment = result.updatedAppointment;

                // Update the content of the appointment element
                appointmentElement.innerHTML = `<strong>Title:</strong> ${updatedAppointment.title}<br><strong>Date:</strong> ${new Date(updatedAppointment.date).toLocaleString()}`;

                // You can add more styling or adjustments as needed

                console.log('Appointment date updated successfully:', updatedAppointment);
            })
            .catch(error => {
                console.error('Error updating appointment date:', error);
            });
    }

    // Define the cancelEditingDate function
    function cancelEditingDate(appointmentId, appointmentElement, editedDateInput) {
        // Remove the input field and buttons
        appointmentElement.innerHTML = `<strong>Title:</strong> ${appointmentElement.dataset.title}<br><strong>Date:</strong> ${appointmentElement.dataset.date}`;
    }
        function filterAppointments() {
            const searchInput = document.getElementById('searchInput').value.toLowerCase();
            const appointmentsList = document.getElementById('appointmentsList');
            const appointments = appointmentsList.getElementsByTagName('li');

            for (const appointment of appointments) {
                const lastName = appointment.textContent.toLowerCase();

                // Hide or show appointments based on the search input
                if (lastName.includes(searchInput)) {
                    appointment.style.display = '';
                } else {
                    appointment.style.display = 'none';
                }
            }
        }

        function deleteAppointment(appointmentId) {
            // Ask for confirmation before deleting
            const isConfirmed = confirm('Are you sure you want to delete this appointment?');

            if (isConfirmed) {
                fetch(`/cancel-appointment/${appointmentId}`, {
                    method: 'POST',
                })
                .then(response => response.json())
                .then(result => {
                    console.log(result.message);
                    // Remove the deleted appointment from the page
                    const deletedAppointment = document.getElementById(`appointment-${appointmentId}`);
                    deletedAppointment.remove();
                })
                .catch(error => {
                    console.error('Error deleting appointment:', error);
                });
            }
        }

        function editAppointment(appointmentId) {
    // Find the appointment element by ID
    const appointmentElement = document.getElementById(`appointment-${appointmentId}`);

    // Check if the appointment element exists
    if (!appointmentElement) {
        console.error(`Appointment element with ID 'appointment-${appointmentId}' not found`);
        return;
    }

    // Save the existing title and date to the dataset for canceling purposes
    const titleElement = appointmentElement.querySelector('strong:first-of-type');
    const dateElement = appointmentElement.querySelector('strong:last-of-type');

    if (!titleElement || !dateElement) {
        console.error(`Title or date element not found in the appointment element`);
        return;
    }

    appointmentElement.dataset.title = titleElement.nextSibling.textContent.trim();
    appointmentElement.dataset.date = dateElement.nextSibling.textContent.trim();

    // Create an input field for editing the date
    const editedDateInput = document.createElement('input');
    editedDateInput.type = 'datetime-local';
    editedDateInput.value = appointmentElement.dataset.date.replace(',', '');

    // Replace the content of the appointment element with the input field
    titleElement.nextSibling.remove(); // Remove the existing title text
    dateElement.nextSibling.remove();  // Remove the existing date text

    titleElement.insertAdjacentHTML('afterend', '<br><strong>Date:</strong> '); // Insert a placeholder for the date
    titleElement.parentNode.insertBefore(editedDateInput, titleElement.nextSibling); // Insert the editedDateInput after the title

    // Add a "Save Changes" button
    const saveButton = document.createElement('button');
    saveButton.textContent = 'Save Changes';
    saveButton.onclick = () => saveEditedDate(appointmentId, editedDateInput, appointmentElement);
    appointmentElement.appendChild(saveButton);

    // Add a "Cancel" button
    const cancelButton = document.createElement('button');
    cancelButton.textContent = 'Cancel';
    cancelButton.onclick = () => cancelEditingDate(appointmentId, appointmentElement, editedDateInput);
    appointmentElement.appendChild(cancelButton);
}


        // Function to fetch and display appointments
        function fetchAndDisplayAppointments() {
            // Your existing fetchAndDisplayAppointments function...
        }
    </script>
</body>
</html>







