 <!-- Include the navigation bar -->
 <%- include('partials/nav.ejs') %>
<!-- Display search input for client phone numbers above Next Day buttons -->
<div class="search-container">
  <label for="clientPhoneNumber">Enter Client Phone Number:</label>
  <input type="text" id="clientPhoneNumber" class="search-input" placeholder="Enter phone number" oninput="formatPhoneNumber(this)">
  <button onclick="searchClients()">Search</button>
</div>

<!-- Display user and pet information, appointment history, preferences, and notifications -->
<div id="userProfileContainer" style="display: none;">
  <!-- User Information -->
  <div id="userInfo">
      <h2>User Information</h2>
      <p>Name: <span id="userName"></span></p>
      <p>Phone Number: <span id="userPhoneNumber"></span></p>
      <!-- Add more user information fields as needed -->
  </div>

  <!-- Pet Information -->
  <div id="petInfo">
      <h2>Pet Information</h2>
      <p>Pet Name: <span id="petName"></span></p>
      <p>Breed: <span id="petBreed"></span></p>
      <p>Age: <span id="petAge"></span></p>
      <p>Special Instructions: <span id="specialInstructions"></span></p>
      <!-- Add more pet information fields as needed -->
  </div>
  <!-- Reminders and Notifications -->
  <div id="notifications">
      <h2>Reminders and Notifications</h2>
      <label>
          <input type="checkbox" id="appointmentReminders"> Receive appointment reminders
      </label>
  </div>
</div>

<script>
  // Add event listener to format phone number while typing
  function formatPhoneNumber(input) {
      const cursorPosition = input.selectionStart;
      const numericValue = input.value.replace(/\D/g, '');
      const limitedNumericValue = numericValue.slice(0, 10);
  
      let formattedNumber = '';
      let formattedCursorPosition = cursorPosition;
  
      for (let i = 0; i < limitedNumericValue.length; i++) {
        if (i === 3 || i === 6) {
          formattedNumber += '-';
          if (cursorPosition > i) {
            formattedCursorPosition++;
          }
        }
        formattedNumber += limitedNumericValue[i];
      }
  
      // Update the global variable clientPhoneNumber
      clientPhoneNumber = formattedNumber;
  
      input.value = formattedNumber;
      input.setSelectionRange(formattedCursorPosition, formattedCursorPosition);
  }

  async function searchClients() {
      const phoneNumber = document.getElementById('clientPhoneNumber').value;

      try {
          const response = await fetch(`/get-client-profile?phoneNumber=${phoneNumber}`);
          const data = await response.json();

          if (response.ok) {
              // Display user profile based on fetched data
              updateUserProfile(data);
          } else {
              // Handle error case
              console.error('Error:', data.error);
              alert('Error fetching client information');
          }
      } catch (error) {
          console.error('Error:', error);
          alert('Error fetching client information');
      }
  }

  function updateUserProfile(data) {
  console.log('Data received:', data); // Log the data object
  const userProfileContainer = document.getElementById('userProfileContainer');
  const userName = document.getElementById('userName');
  const userPhoneNumber = document.getElementById('userPhoneNumber');
  const petInfoContainer = document.getElementById('petInfo');
  const pastAppointments = document.getElementById('pastAppointments');
  const appointmentReminders = document.getElementById('appointmentReminders');

  // Update user information
  userName.textContent = `${data.firstname} ${data.lastname}`;
  userPhoneNumber.textContent = data.phone_number;

  // Update pet information
  petInfoContainer.innerHTML = ''; // Clear previous content

  // Update the check for dogs data
  if (data.dogs && Array.isArray(data.dogs)) {
    data.dogs.forEach((dog, index) => {
      const dogInfoDiv = document.createElement('div');
      dogInfoDiv.innerHTML = `
        <h2>Dog ${index + 1} Information</h2>
        <p>Pet Name: ${dog.dog_name}</p>
        <p>Breed: ${dog.breed}</p>
      `;

      // Check if appointments data exists for the dog before iterating
      if (dog.appointment_history && Array.isArray(dog.appointment_history)) {
  // Update appointment history for each dog
  const dogAppointmentsUl = document.createElement('ul');
  dog.appointment_history.forEach(appointment => {
    const li = document.createElement('li');
    const date = new Date(appointment.date);
    const formattedDate = date.toISOString().split('T')[0]; // Extract and format date
    li.textContent = `Date: ${formattedDate || 'N/A'}`;
    dogAppointmentsUl.appendChild(li);
  });
        dogInfoDiv.appendChild(dogAppointmentsUl);
      } else {
        // If no appointment history, indicate it
        const noAppointmentsMessage = document.createElement('p');
        noAppointmentsMessage.textContent = 'No appointment history available.';
        dogInfoDiv.appendChild(noAppointmentsMessage);
      }

      petInfoContainer.appendChild(dogInfoDiv);
    });
  } else {
    // Handle the case where no dog information is available
    petInfoContainer.innerHTML = 'No pet information available.';
  }

  // Update reminders and notifications
  appointmentReminders.checked = data.receive_appointment_reminders;

  // Display the user profile container
  userProfileContainer.style.display = 'block';
}
</script>
