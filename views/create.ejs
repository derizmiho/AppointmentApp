<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Create and View Appointments</title>
    <style>
        /* Add your CSS styles here if needed */
    </style>
</head>
<body>
    <!-- Include the navigation bar -->
    <%- include('partials/nav.ejs') %>
    
    <h1>Create and View Appointments</h1>

    <!-- Display the current day -->
    <div id="currentDay"></div>

    <!-- Display the current day -->
    <input type="date" id="date">

    <!-- Buttons to switch the day of the week within the next 7 days -->
    <div class="button-group">
        <button onclick="switchDay(-1)">Previous Day</button>
        <button onclick="switchDay(1)">Next Day</button>
    </div>

    <!-- Display search input for client phone numbers above Next Day buttons -->
    <div class="search-container">
        <label for="clientPhoneNumber">Enter Client Phone Number:</label>
        <input type="text" id="clientPhoneNumber" class="search-input" placeholder="Enter phone number" oninput="formatPhoneNumber(this)">
        <button onclick="searchClients()">Search</button>
    </div>

    <!-- Dropdown to select weeks 1-12 -->
    <label for="weekSelect">Select Week:</label>
    <select id="weekSelect" onchange="loadAppointmentsForWeek()">
        <% for (let i = 1; i <= 12; i++) { %>
            <option value="<%= i %>">Week <%= i %></option>
        <% } %>
    </select>

    <!-- Display search results (optional) -->
    <div id="searchResults"></div>

    <!-- Display available time slots -->
    <div id="timeSlots">
        <!-- Loop through time slots and display them vertically -->
        <% for (let hour = 8; hour < 16; hour++) { %>
            <% for (let minute = 0; minute < 60; minute += 30) { %>
                <% const timeSlotValue = `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`; %>
                <div class="time-slot" onclick="selectTime('<%= timeSlotValue %>')">
                    <p><%= timeSlotValue %></p>
                    <p id="<%= `appointment-${timeSlotValue.replace(':', '')}` %>"></p>
                </div>
            <% } %>
        <% } %>
    </div>

    <!-- JavaScript for create page -->
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // Set the default value for the date input after the page has loaded
            const currentDateInput = document.getElementById('date');
            const currentDate = new Date();
            currentDateInput.value = formatDateDefault(currentDate);

            // Display the current day
            displayCurrentDay(currentDate);

            // Load existing appointments on page load
            fetchAndDisplayAppointments();
        });

        // Add event listener to format phone number while typing
        function formatPhoneNumber(input) {
            const cursorPosition = input.selectionStart;
            const numericValue = input.value.replace(/\D/g, '');
            const limitedNumericValue = numericValue.slice(0, 10);

            let formattedNumber = '';
            let formattedCursorPosition = cursorPosition;

            for (let i = 0; i < limitedNumericValue.length; i++) {
                if (i === 3 || i === 6) {
                    formattedNumber += '-';
                    if (cursorPosition > i) {
                        formattedCursorPosition++;
                    }
                }
                formattedNumber += limitedNumericValue[i];
            }

            input.value = formattedNumber;
            input.setSelectionRange(formattedCursorPosition, formattedCursorPosition);
        }

        // Rest of your JavaScript code...

// Function to clear all appointment titles from time slots
function clearAllAppointments() {
    const allTimeSlots = document.getElementById('timeSlots').children;

    for (const timeSlot of allTimeSlots) {
        const timeSlotElement = timeSlot.children[1];
        clearAppointmentTitle(timeSlotElement);
    }
}

// Function to clear an appointment title
function clearAppointmentTitle(element) {
    if (element) {
        element.textContent = '';
    }
}

// Function to fetch and display appointments
async function fetchAndDisplayAppointments() {
    const selectedDate = document.getElementById('date').value;

    console.log('Fetching Appointments for Date:', selectedDate);

    try {
        // Send GET request to load appointments for the selected date
        const response = await fetch(`/load-appointments?date=${selectedDate}`);
        const appointments = await response.json();

        console.log('Fetched Appointments:', appointments);

        // Clear all appointment titles from time slots
        clearAllAppointments();

        // Display the appointments on the page
        appointments.forEach(appointment => {
            const timeSlotId = `appointment-${appointment.time_slot.replace(':', '')}`;
            const timeSlotElement = document.getElementById(timeSlotId);

            console.log('Processing time slot:', timeSlotId);
            console.log('Time slot element:', timeSlotElement);

            // Add the appointment to the time slot
            if (timeSlotElement) {
                // Create a new div for the time slot and appointment with inline styles
                const containerDiv = document.createElement('div');
                containerDiv.style.display = 'flex';
                containerDiv.style.alignItems = 'center';

                // Create a div for the time slot
                const timeSlotDiv = document.createElement('div');
                timeSlotDiv.textContent = timeSlotElement.textContent;

                // Create a div for the appointment title
                const appointmentDiv = document.createElement('div');
                appointmentDiv.textContent = appointment.title;
                appointmentDiv.style.marginLeft = '10px'; // Adjust the margin as needed

                // Append both divs to the container
                containerDiv.appendChild(timeSlotDiv);
                containerDiv.appendChild(appointmentDiv);

                // Replace the content of the time slot element with the container
                timeSlotElement.innerHTML = '';
                timeSlotElement.appendChild(containerDiv);
            }

            console.log('Updated time slot:', timeSlotId);
        });

        console.log('All time slots processed.');

    } catch (error) {
        console.error('Error loading appointments:', error);
    }
}

// Function to display the current day
function displayCurrentDay(date) {
    const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
    const formattedDate = date.toLocaleDateString('en-US', options);
    document.getElementById('currentDay').textContent = `Current Day: ${formattedDate}`;
}

// Function to search clients by phone number for a specific time slot
async function searchClients() {
    console.log('Search button clicked');

    // Get the search input element
    const searchInput = document.getElementById('clientPhoneNumber');
    const searchResultsContainer = document.getElementById('searchResults');

    // Check if searchInput is null
    if (!searchInput) {
        console.error('Search input element not found.');
        return;
    }

    // Get the formatted phone number
    let phoneNumber = searchInput.value.trim();
    phoneNumber = phoneNumber.replace(/(\d{3})(\d{3})(\d{4})/, '$1-$2-$3');

    // Perform the search by making a request to the server
    try {
        const response = await fetch(`/get-client-profile?phoneNumber=${phoneNumber}`);
        const clientProfile = await response.json();

        // Check if a client was found
        if (clientProfile.error) {
            searchResultsContainer.textContent = `Client not found for phone number: ${phoneNumber}`;
        } else {
            // Redirect to the customer-profile route with the obtained phone number
            window.location.href = `/customer-profile?phoneNumber=${phoneNumber}`;
        }
    } catch (error) {
        console.error('Error searching for client:', error);
        searchResultsContainer.textContent = 'Error searching for client. Please try again.';
    }
}

// Function to adjust the current date based on the real-life current day and fetch appointments
function loadAppointmentsForWeek() {
    // Get the selected week value from the dropdown
    const selectedWeek = parseInt(document.getElementById('weekSelect').value);

    // Get the current date input element
    const currentDateInput = document.getElementById('date');

    // Get the current date from the input element
    const currentDate = new Date();

    // Calculate the difference in days between the current week and the selected week
    const daysToAdd = (selectedWeek - 1) * 7;

    // Adjust the current date by adding the calculated days
    const newDate = new Date(currentDate.getTime() + daysToAdd * 24 * 60 * 60 * 1000);

    // Update the input value with the new date
    currentDateInput.value = formatDateDefault(newDate);

    // Display the updated current date
    displayCurrentDay(newDate);

    // Fetch and display appointments for the new date
    fetchAndDisplayAppointments();
}

// Function to format the date as YYYY-MM-DD for server communication
function formatDateForServer(date) {
    const year = date.getFullYear();
    const month = (date.getMonth() + 1).toString().padStart(2, '0');
    const day = date.getDate().toString().padStart(2, '0');
    return `${year}-${month}-${day}`;
}

// Function to get the default formatted date as "yyyy-MM-dd"
function formatDateDefault(date) {
    const currentDate = date || new Date();
    const year = currentDate.getFullYear();
    const month = (currentDate.getMonth() + 1).toString().padStart(2, '0');
    const day = currentDate.getDate().toString().padStart(2, '0');
    return `${year}-${month}-${day}`;
}

// Function to switch the day based on the offset
function switchDay(offset) {
    const currentDateInput = document.getElementById('date');
    const currentDate = new Date(currentDateInput.value);

    if (!isNaN(currentDate.getTime())) {
        // Adjust for the local time zone offset
        const localOffset = currentDate.getTimezoneOffset() * 60 * 1000;
        
        // Calculate the new date based on the offset
        const newDate = new Date(currentDate.getTime() + offset * 24 * 60 * 60 * 1000 + localOffset);

        currentDateInput.value = formatDateDefault(newDate);
        displayCurrentDay(newDate);
        fetchAndDisplayAppointments();
    }
}
</script>
</body>
</html>

