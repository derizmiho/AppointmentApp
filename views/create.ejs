<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Create and View Appointments</title>
</head>
<body>
    <!-- Include the navigation bar -->
    <%- include('partials/nav.ejs') %>
    
    <h1>Create and View Appointments</h1>
    <!-- Form for creating a new appointment -->
    <form id="appointmentForm">
        <label for="title">Title:</label>
        <input type="text" id="title" required>
        <!-- Update the date input to have a default value -->
        <label for="date">Select Date:</label>
        <input type="date" id="date" required>

        <!-- Simplify the time slot input -->
        <label for="timeSlot">Select Time Slot:</label>
        <input type="text" id="timeSlot" placeholder="HH:mm" required>

        <button type="submit">Add Appointment</button>
    </form>

    <!-- Display the current day -->
    <p id="currentDay"></p>
    
    <!-- Buttons to switch the day of the week within the next 7 days -->
    <div>
        <button onclick="switchDay(-1)">Previous Day</button>
        <button onclick="switchDay(1)">Next Day</button>
    </div>

    <!-- Dropdown to select weeks 1-12 -->
    <label for="weekSelect">Select Week:</label>
    <select id="weekSelect" onchange="loadAppointmentsForWeek()">
        <% for (let i = 1; i <= 12; i++) { %>
            <option value="<%= i %>">Week <%= i %></option>
        <% } %>
    </select>

    <!-- Display available time slots -->
    <div id="timeSlots">
        <!-- Loop through time slots and display them vertically -->
        <% for (let hour = 8; hour < 16; hour++) { %>
            <% for (let minute = 0; minute < 60; minute += 30) { %>
                <% const timeSlotValue = `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`; %>
                <div onclick="selectTime('<%= timeSlotValue %>')" style="display: flex; align-items: center;">
                    <p style="margin-right: 10px;"><%= timeSlotValue %></p>
                    <p id="<%= `appointment-${timeSlotValue.replace(':', '')}` %>"></p>
                </div>
            <% } %>
        <% } %>                
    </div>

    <!-- JavaScript for create page -->
    <script>
        // Function to format the date as YYYY-MM-DD
        function formatDate(date) {
            const options = { year: 'numeric', month: '2-digit', day: '2-digit' };
            return date.toLocaleDateString('en-US', options);
        }

        function selectTime(selectedTime) {
    const formattedTime = selectedTime.slice(0, 5); // Extract HH:mm from HH:mm:ss
    const timeSlotElement = document.getElementById(`appointment-${formattedTime}`);

    if (timeSlotElement) {
        timeSlotElement.textContent = selectedTime.slice(0, 5); // Set the text content with HH:mm
    }
}




        // Function to get the default formatted date as "yyyy-MM-dd"
        function formatDateDefault() {
            const currentDate = new Date();
            const year = currentDate.getFullYear();
            const month = (currentDate.getMonth() + 1).toString().padStart(2, '0');
            const day = currentDate.getDate().toString().padStart(2, '0');
            return `${year}-${month}-${day}`;
        }

        document.addEventListener('DOMContentLoaded', () => {
            // Set the default value for the date input after the page has loaded
            const currentDateInput = document.getElementById('date');
            currentDateInput.value = formatDateDefault(); // Set the default value in the required format

            // Load existing appointments on page load
            fetchAndDisplayAppointments();

        // Handle form submission to create a new appointment
        document.getElementById('appointmentForm').addEventListener('submit', (event) => {
        event.preventDefault();

       // Gather form data
       const title = document.getElementById('title').value;
        const date = currentDateInput.value;

        // Check if timeSlot is defined and not empty
        const timeSlotElement = document.getElementById('timeSlot');
        const timeSlot = timeSlotElement ? timeSlotElement.value : null;

        // Check if timeSlot is defined and not empty
        if (timeSlot === null || timeSlot.trim() === '') {
            console.error('Selected time slot is empty or null');
            return; // Do not proceed with the fetch request
        }

        console.log('Form Data:', { title, date, timeSlot }); // Log the form data

        // Make a fetch call to create the appointment
        fetch('/create', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ title, date, timeSlot }),
        })
        .then(response => response.json())
        .then(data => {
            console.log('Create Appointment Response:', data);

            // Fetch and display appointments for the new date
            fetchAndDisplayAppointments();
        })
        .catch(error => console.error('Error creating appointment:', error));

        // Update the input value with the new date
        currentDateInput.value = formatDateDefault();
    });


            // Display the current day with the current date
            const currentDate = new Date();
            displayCurrentDay(currentDate);
        });

        // Function to clear all appointment titles from time slots
        function clearAllAppointmentTitles() {
            const allTimeSlots = document.getElementById('timeSlots').children;

            for (const timeSlot of allTimeSlots) {
                const timeSlotElement = timeSlot.children[1];
                clearAppointmentTitle(timeSlotElement);
            }
        }

        // Function to clear an appointment title
        function clearAppointmentTitle(element) {
            if (element) {
                element.textContent = '';
            }
        }


        function fetchAndDisplayAppointments() {
            const selectedDate = document.getElementById('date').value;

            console.log('Fetching Appointments for Date:', selectedDate);

            // Send GET request to load appointments for the selected date
            fetch(`/load-appointments?date=${selectedDate}`)
                .then(response => response.json())
                .then(appointments => {
                    console.log('Fetched Appointments:', appointments);

                    // Clear all appointment titles from time slots
                    clearAllAppointmentTitles();

                    // Display the appointments on the page
                    appointments.forEach(appointment => {
                        const timeSlotId = `appointment-${appointment.time_slot.replace(':', '')}`;
                        const timeSlotElement = document.getElementById(timeSlotId);

                        // Add the appointment to the time slot
if (timeSlotElement) {
    // Create a new div for the time slot and appointment with inline styles
    const containerDiv = document.createElement('div');
    containerDiv.style.display = 'flex';
    containerDiv.style.alignItems = 'center';

    // Create a div for the time slot
    const timeSlotDiv = document.createElement('div');
    timeSlotDiv.textContent = timeSlotElement.textContent;

    // Create a div for the appointment title
    const appointmentDiv = document.createElement('div');
    appointmentDiv.textContent = appointment.title;
    appointmentDiv.style.marginLeft = '10px'; // Adjust the margin as needed

    // Append both divs to the container
    containerDiv.appendChild(timeSlotDiv);
    containerDiv.appendChild(appointmentDiv);

    // Replace the content of the time slot element with the container
    timeSlotElement.innerHTML = '';
    timeSlotElement.appendChild(containerDiv);
}

                        console.log('Updating time slot:', timeSlotId);
                        console.log('Time slot element:', timeSlotElement);
                    });
                })
                .catch(error => console.error('Error loading appointments:', error));
        }

        
        // Modify the date input to use a consistent format (YYYY-MM-DD)
        function formatDateForServer(dateString) {
            const date = new Date(dateString);
            const year = date.getFullYear();
            const month = (date.getMonth() + 1).toString().padStart(2, '0');
            const day = date.getDate().toString().padStart(2, '0');
            return `${year}-${month}-${day}`;
}

// Update the form submission to use the correct date format
document.getElementById('appointmentForm').addEventListener('submit', async (event) => {
    event.preventDefault();

    // Gather form data
    const title = document.getElementById('title').value;
    const dateInput = document.getElementById('date');
    const date = formatDateForServer(dateInput.value);
    const timeSlot = document.getElementById('timeSlot').value;

    console.log('Form Data:', { title, date, timeSlot }); // Log the form data

    try {
        // Fetch and display appointments for the new date
        await fetchAndDisplayAppointments();
    } catch (error) {
        console.error('Error fetching and displaying appointments:', error);
    }
});

            function switchDay(offset) {
                const currentDateInput = document.getElementById('date');
                let currentDate = new Date(currentDateInput.value);

                if (isNaN(currentDate.getTime())) {
                    // If the current date is invalid, use the default formatted date
                    currentDate = new Date(formatDateDefault());
                    currentDateInput.value = formatDateDefault();
                }

                // Calculate the new day of the week
                const newDate = new Date(currentDate);
                newDate.setDate(currentDate.getDate() + offset);

                // Update the input value with the new date
                currentDateInput.value = newDate.toISOString().slice(0, 10);

                // Display the updated current day
                displayCurrentDay(newDate);

                // Fetch and display appointments for the new date
                fetchAndDisplayAppointments();
            }


            // Function to display the current day
            function displayCurrentDay(date) {
                const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
                const formattedDate = date.toLocaleDateString('en-US', options);
                document.getElementById('currentDay').textContent = `Current Day: ${formattedDate}`;
            }

    </script>
</body>
</html>
