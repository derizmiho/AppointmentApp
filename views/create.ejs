<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Create and View Appointments</title>
    <!-- Add your CSS styles here if needed -->
</head>
<body>
    <!-- Include the navigation bar -->
    <%- include('partials/nav.ejs') %>
    
    <h1>Create and View Appointments</h1>

    <!-- Display the current day -->
    <div id="currentDay"></div>

    <!-- Display the current day -->
    <input type="date" id="date">

    <!-- Buttons to switch the day of the week within the next 7 days -->
    <div class="button-group">
        <button onclick="switchDay(-1)">Previous Day</button>
        <button onclick="switchDay(1)">Next Day</button>
    </div>

    <!-- Display search input for client phone numbers above Next Day buttons -->
    <div class="search-container">
        <label for="clientPhoneNumber">Enter Client Phone Number:</label>
        <input type="text" id="clientPhoneNumber" class="search-input" placeholder="Enter phone number" oninput="formatPhoneNumber(this)">
        <button onclick="searchClients()">Search</button>
    </div>

    <!-- Display client details -->
    <div id="clientDetails">
        <!-- Client details will be displayed here -->
    </div>
<!-- Dog Dropdown Container -->
<div id="dogDropdownContainer">
    <label for="dogDropdown">Select Dog:</label>
    <select id="dogDropdown"></select>
</div>
<!-- Add a button for confirming the selection -->
<button onclick="confirmPetSelection()">Confirm</button>

<!-- Add a container for pet information -->
<div id="petInformation">
    <!-- Pet information will be displayed here -->
</div>

    <!-- Dropdown to select weeks 1-12 -->
    <label for="weekSelect">Select Week:</label>
    <select id="weekSelect" onchange="loadAppointmentsForWeek()">
        <% for (let i = 1; i <= 12; i++) { %>
            <option value="<%= i %>">Week <%= i %></option>
        <% } %>
    </select>

    <!-- Display search results (optional) -->
    <div id="searchResults"></div>

    <!-- Display available time slots -->
<div id="timeSlots">
    <!-- Loop through time slots and display them as buttons -->
    <% for (let hour = 8; hour < 16; hour++) { %>
        <% for (let minute = 0; minute < 60; minute += 30) { %>
            <% const timeSlotValue = `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`; %>
            <button class="time-slot-button" onclick="scheduleAppointment('<%= timeSlotValue %>')">
                <p><%= timeSlotValue %></p>
                <p id="<%= `appointment-${timeSlotValue.replace(':', '')}` %>"></p>
            </button>
        <% } %>
    <% } %>
</div>

<!-- JavaScript for create page -->
<script>

    // Updated function to schedule appointments
async function scheduleAppointment(selectedTime) {
    // Check if clientAndDogInfo is available
    if (!clientAndDogInfo) {
        console.error('Client and dog information is not available.');
        return;
    }

    // Get the selected dog from the dropdown
    const selectedDogNumber = parseInt(document.getElementById('dogDropdown').value);
    const selectedDog = clientAndDogInfo.dogs[selectedDogNumber - 1];

    // Prepare data for the appointment
    const appointmentData = {
        client_id: clientAndDogInfo.client_id,
        dog_id: selectedDog ? selectedDog.dog_id : null,
        time_slot: selectedTime,
        date: document.getElementById('date').value, // Use the selected date from the input
        phone_number: clientPhoneNumber,
        // Add other relevant appointment details here
    };
    console.log('Sending appointment data:', appointmentData);

    try {
        // Send a POST request to the server to create a new appointment
        const response = await fetch('/create-appointment', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(appointmentData),
        });

        const result = await response.json();
        console.log('Appointment creation result:', result);

        // Optionally, you can update the UI to reflect the newly scheduled appointment
        // ...

    } catch (error) {
        console.error('Error scheduling appointment:', error);
        // Handle errors as needed
    }
}
// Assuming you have a function to insert the appointment into the database
async function insertAppointmentIntoDatabase(appointmentData) {
    try {
        const { client_id, dog_id, time_slot, date } = appointmentData;

        // Format the date as 'YYYY-MM-DD' using your existing function
        const formattedDate = formatDateForServer(new Date(date));

        // Your MySQL query to insert the appointment into the database
        const insertQuery = `
            INSERT INTO appointments (client_id, dog_id, time_slot, date)
            VALUES (?, ?, ?, ?)
        `;

        // Execute the query with the provided data
        const [result] = await db.query(insertQuery, [client_id, dog_id, time_slot, formattedDate]);

        // Assuming the insertion is successful
        if (result.affectedRows === 1) {
            return { success: true };
        } else {
            console.error('Unexpected number of affected rows:', result.affectedRows);
            return { success: false, message: 'Error inserting appointment into the database' };
        }
    } catch (error) {
        console.error('Error inserting appointment into the database:', error);
        return { success: false, message: 'Error inserting appointment into the database' };
    }
}

        function loadPetInformation(selectedDog) {
            console.log('Selected Dog Information:', selectedDog);

    // Assuming you have an element with an ID 'petInformation' to display the information
    const petInfoContainer = document.getElementById('petInformation');

    // Clear existing information
    petInfoContainer.innerHTML = '';

    // Create HTML elements to display pet information
    const dogNameElement = document.createElement('p');
    dogNameElement.textContent = `Dog Name: ${selectedDog.dog_name}`;

    const breedElement = document.createElement('p');
    breedElement.textContent = `Breed: ${selectedDog.breed}`;

    // Add the elements to the container
    petInfoContainer.appendChild(dogNameElement);
    petInfoContainer.appendChild(breedElement);

    // You can add more elements for additional information as needed
}
        let clientPhoneNumber;
        let clientAndDogInfo;
        document.addEventListener('DOMContentLoaded', () => {
            // Set the default value for the date input after the page has loaded
            const currentDateInput = document.getElementById('date');
            const currentDate = new Date();
            currentDateInput.value = formatDateDefault(currentDate);

            
    // Add event listener for date change
    currentDateInput.addEventListener('change', () => {
        // Reload appointments when the date changes
        fetchAndDisplayAppointments();
    });
            
            // Display the current day
            displayCurrentDay(currentDate);

            // Load existing appointments on page load
            fetchAndDisplayAppointments();
        });

        // Add event listener to format phone number while typing
function formatPhoneNumber(input) {
    const cursorPosition = input.selectionStart;
    const numericValue = input.value.replace(/\D/g, '');
    const limitedNumericValue = numericValue.slice(0, 10);

    let formattedNumber = '';
    let formattedCursorPosition = cursorPosition;

    for (let i = 0; i < limitedNumericValue.length; i++) {
        if (i === 3 || i === 6) {
            formattedNumber += '-';
            if (cursorPosition > i) {
                formattedCursorPosition++;
            }
        }
        formattedNumber += limitedNumericValue[i];
    }

    // Update the global variable clientPhoneNumber
    clientPhoneNumber = formattedNumber;

    input.value = formattedNumber;
    input.setSelectionRange(formattedCursorPosition, formattedCursorPosition);
}

        // Function to format the date as YYYY-MM-DD for server communication
function formatDateForServer(date) {
    const year = date.getFullYear();
    const month = (date.getMonth() + 1).toString().padStart(2, '0');
    const day = date.getDate().toString().padStart(2, '0');
    return `${year}-${month}-${day}`;
}

// Function to get the default formatted date as "yyyy-MM-dd"
function formatDateDefault(date) {
    const currentDate = date || new Date();
    const year = currentDate.getFullYear();
    const month = (currentDate.getMonth() + 1).toString().padStart(2, '0');
    const day = currentDate.getDate().toString().padStart(2, '0');
    return `${year}-${month}-${day}`;
}


        // Function to clear an appointment title
        function clearAppointmentTitle(element) {
            if (element) {
                element.textContent = '';
            }
        }
        
        // Function to clear all appointment titles from time slots
        function clearAllAppointments() {
            const allTimeSlots = document.getElementById('timeSlots').children;

            for (const timeSlot of allTimeSlots) {
                const timeSlotElement = timeSlot.children[1];
                clearAppointmentTitle(timeSlotElement);
            }
        }

         // Function to display the current day
         function displayCurrentDay(date) {
            const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
            const formattedDate = date.toLocaleDateString('en-US', options);
            document.getElementById('currentDay').textContent = `Current Day: ${formattedDate}`;
        }

        // Function to fetch and display appointments
async function fetchAndDisplayAppointments() {
    const selectedDate = document.getElementById('date').value;

    console.log('Fetching Appointments for Date:', selectedDate);

    try {
        // Send GET request to load appointments for the selected date
        const response = await fetch(`/load-appointments?date=${selectedDate}`);
        const appointments = await response.json();

        console.log('Fetched Appointments:', appointments);

        // Clear all appointment titles from time slots
        clearAllAppointments();

        // Display the appointments on the page
        appointments.forEach(appointment => {
            const timeSlotId = `appointment-${appointment.time_slot.replace(':', '')}`;
            const timeSlotElement = document.getElementById(timeSlotId);

            console.log('Processing time slot:', timeSlotId);
            console.log('Time slot element:', timeSlotElement);

            // Add the appointment to the time slot
            if (timeSlotElement) {
                // Create a new div for the time slot and appointment with inline styles
                const containerDiv = document.createElement('div');
                containerDiv.style.display = 'flex';
                containerDiv.style.alignItems = 'center';

                // Create a div for the time slot
                const timeSlotDiv = document.createElement('div');
                timeSlotDiv.textContent = timeSlotElement.textContent;

                // Create a div for the appointment title
                const appointmentDiv = document.createElement('div');
                appointmentDiv.textContent = appointment.title;
                appointmentDiv.style.marginLeft = '10px'; // Adjust the margin as needed

                // Append both divs to the container
                containerDiv.appendChild(timeSlotDiv);
                containerDiv.appendChild(appointmentDiv);

                // Replace the content of the time slot element with the container
                timeSlotElement.innerHTML = '';
                timeSlotElement.appendChild(containerDiv);
            }

            console.log('Updated time slot:', timeSlotId);
        });

        console.log('All time slots processed.');

        // If client details are available, display them
        if (clientAndDogInfo) {
            displayClientDetails();
        }

    } catch (error) {
        console.error('Error loading appointments:', error);
    }
}

async function searchClients() {
    // Get the search input element and search results container
    const searchInput = document.getElementById('clientPhoneNumber');
    const searchResultsContainer = document.getElementById('searchResults');

    // Check if searchInput is null
    if (!searchInput) {
        console.error('Search input element not found.');
        return;
    }

    // Get the formatted phone number
    let phoneNumber = searchInput.value.trim();
    phoneNumber = phoneNumber.replace(/(\d{3})(\d{3})(\d{4})/, '$1-$2-$3');

    try {
        // Make a request to the server to get the client profile
        const response = await fetch(`/get-client-profile?phoneNumber=${phoneNumber}`);
        const clientProfile = await response.json();

        console.log('Server Response (clientProfile):', clientProfile);

        // Check if a client was found
        if (clientProfile.client_id) {
            // Update the clientAndDogInfo object
            clientAndDogInfo = clientProfile;

            // Display client details on the page
            displayClientDetails();

            console.log('Client and Dog Info:', clientAndDogInfo);

            // Check if there are dogs available for the selected client
            if (clientAndDogInfo.dogs && clientAndDogInfo.dogs.length > 0) {
                // Dynamically populate the dog dropdown based on the selected client
                populateDogDropdown(clientAndDogInfo.dogs); // Wrap the dog information in an array
            } else {
                // Display an error message if no dogs are associated with the client
                searchResultsContainer.textContent = 'No dogs found for the selected client.';
            }
        } else {
            // Display an error message if the client was not found
            searchResultsContainer.textContent = `Client not found for phone number: ${phoneNumber}`;
        }
    } catch (error) {
        // Handle any errors that occur during the fetch operation
        console.error('Error searching for client:', error);
        searchResultsContainer.textContent = 'Error searching for client. Please try again.';
    }
}

function populateDogDropdown(dogsArray) {
    console.log('Received dogsArray:', dogsArray);

    const dropdown = document.getElementById('dogDropdown');

    // Clear existing options
    dropdown.innerHTML = '';

    // Check if dogsArray is defined and not null
    if (dogsArray && Array.isArray(dogsArray) && dogsArray.length > 0) {
        // Add default option
        const defaultOption = document.createElement('option');
        defaultOption.value = '0';
        defaultOption.text = 'Select Dog';
        dropdown.add(defaultOption);

        // Iterate through dogsArray and populate dropdown
        dogsArray.forEach((dog, index) => {
            const option = document.createElement('option');
            option.value = (index + 1).toString(); // Option value is the position in the array
            option.text = `Dog ${index + 1}: ${dog.dog_name}`;
            dropdown.add(option);
        });

        // Add event listener
        dropdown.addEventListener('change', () => {
            const selectedDogIndex = dropdown.value - 1; // Adjusting for index + 1
            if (selectedDogIndex >= 0 && selectedDogIndex < dogsArray.length) {
                // Call a function to load information based on the selected dog
                loadPetInformation(dogsArray[selectedDogIndex]);
            }
        });
    } else {
        console.error('Dogs array is not defined or not an array.');
    }
}



function confirmPetSelection() {
    const dogDropdown = document.getElementById('dogDropdown');
    const petInformationContainer = document.getElementById('petInformation');

    // Get the selected dog number from the dropdown
    const selectedDogNumber = parseInt(dogDropdown.value);

    // Find the selected dog from the array
    const selectedDog = clientAndDogInfo.dogs.find(dog => dog.dogNumber === selectedDogNumber);

    // Display pet information
    if (selectedDog) {
        petInformationContainer.innerHTML = `
            <h2>Pet Information</h2>
            <p>Name: ${selectedDog.name}</p>
            <p>Breed: ${selectedDog.breed}</p>
            <!-- Add more pet information fields as needed -->
        `;
    } else {
        // Clear pet information if no dog is selected
        petInformationContainer.innerHTML = '';
    }
}


function displayClientDetails() {
    // Display client details on the page
    const clientDetailsContainer = document.getElementById('clientDetails');
    clientDetailsContainer.innerHTML = '';

    // Check if clientAndDogInfo is defined
    if (typeof clientAndDogInfo !== 'undefined' && clientAndDogInfo !== null) {
        // Display client details
        const clientDetails = document.createElement('div');
        clientDetails.innerHTML = `
            <h2>Client Information</h2>
            <p>First Name: ${clientAndDogInfo.firstname}</p>
            <p>Last Name: ${clientAndDogInfo.lastname}</p>
            <p>Phone Number: ${clientAndDogInfo.phone_number}</p>
        `;

        // Append client details to the container
        clientDetailsContainer.appendChild(clientDetails);

        // Display dog dropdown
        document.getElementById('dogDropdownContainer').style.display = 'block';
    } else {
        console.error('Invalid clientAndDogInfo structure:', clientAndDogInfo);
    }
}


        // Function to load appointments for the selected week
function loadAppointmentsForWeek() {
    // Get the selected week value from the dropdown
    const selectedWeek = parseInt(document.getElementById('weekSelect').value);

    // Get the current date input element
    const currentDateInput = document.getElementById('date');

    // Get the current date from the input element
    const currentDate = new Date();

    // Calculate the difference in days between the current week and the selected week
    const daysToAdd = (selectedWeek - 1) * 7;

    // Adjust the current date by adding the calculated days
    const newDate = new Date(currentDate.getTime() + daysToAdd * 24 * 60 * 60 * 1000);

    // Update the input value with the new date
    currentDateInput.value = formatDateDefault(newDate);

    // Display the updated current date
    displayCurrentDay(newDate);

    // Fetch and display appointments for the new date
    fetchAndDisplayAppointments();
}

        // Function to switch the day based on the offset
        function switchDay(offset) {
            const currentDateInput = document.getElementById('date');
            const currentDate = new Date(currentDateInput.value);

            if (!isNaN(currentDate.getTime())) {
                // Adjust for the local time zone offset
                const localOffset = currentDate.getTimezoneOffset() * 60 * 1000;
                
                // Calculate the new date based on the offset
                const newDate = new Date(currentDate.getTime() + offset * 24 * 60 * 60 * 1000 + localOffset);

                currentDateInput.value = formatDateDefault(newDate);
                displayCurrentDay(newDate);
                fetchAndDisplayAppointments();
            }
        }
    </script>
</body>
</html>
